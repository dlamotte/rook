package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteVolumeAttachmentHandlerFunc turns a function with the right signature into a delete volume attachment handler
type DeleteVolumeAttachmentHandlerFunc func(DeleteVolumeAttachmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteVolumeAttachmentHandlerFunc) Handle(params DeleteVolumeAttachmentParams) middleware.Responder {
	return fn(params)
}

// DeleteVolumeAttachmentHandler interface for that can handle valid delete volume attachment params
type DeleteVolumeAttachmentHandler interface {
	Handle(DeleteVolumeAttachmentParams) middleware.Responder
}

// NewDeleteVolumeAttachment creates a new http.Handler for the delete volume attachment operation
func NewDeleteVolumeAttachment(ctx *middleware.Context, handler DeleteVolumeAttachmentHandler) *DeleteVolumeAttachment {
	return &DeleteVolumeAttachment{Context: ctx, Handler: handler}
}

/*DeleteVolumeAttachment swagger:route DELETE /v1/clusters/{clusterID}/pools/{poolID}/volumes/{volumeID}/attachments/{attachmentID} deleteVolumeAttachment

DeleteVolumeAttachment delete volume attachment API

*/
type DeleteVolumeAttachment struct {
	Context *middleware.Context
	Handler DeleteVolumeAttachmentHandler
}

func (o *DeleteVolumeAttachment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteVolumeAttachmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
