package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetVolumeAttachmentHandlerFunc turns a function with the right signature into a get volume attachment handler
type GetVolumeAttachmentHandlerFunc func(GetVolumeAttachmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVolumeAttachmentHandlerFunc) Handle(params GetVolumeAttachmentParams) middleware.Responder {
	return fn(params)
}

// GetVolumeAttachmentHandler interface for that can handle valid get volume attachment params
type GetVolumeAttachmentHandler interface {
	Handle(GetVolumeAttachmentParams) middleware.Responder
}

// NewGetVolumeAttachment creates a new http.Handler for the get volume attachment operation
func NewGetVolumeAttachment(ctx *middleware.Context, handler GetVolumeAttachmentHandler) *GetVolumeAttachment {
	return &GetVolumeAttachment{Context: ctx, Handler: handler}
}

/*GetVolumeAttachment swagger:route GET /v1/clusters/{clusterID}/pools/{poolID}/volumes/{volumeID}/attachments/{attachmentID} getVolumeAttachment

GetVolumeAttachment get volume attachment API

*/
type GetVolumeAttachment struct {
	Context *middleware.Context
	Handler GetVolumeAttachmentHandler
}

func (o *GetVolumeAttachment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetVolumeAttachmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
