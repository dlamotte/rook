package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListVolumeAttachmentHandlerFunc turns a function with the right signature into a list volume attachment handler
type ListVolumeAttachmentHandlerFunc func(ListVolumeAttachmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListVolumeAttachmentHandlerFunc) Handle(params ListVolumeAttachmentParams) middleware.Responder {
	return fn(params)
}

// ListVolumeAttachmentHandler interface for that can handle valid list volume attachment params
type ListVolumeAttachmentHandler interface {
	Handle(ListVolumeAttachmentParams) middleware.Responder
}

// NewListVolumeAttachment creates a new http.Handler for the list volume attachment operation
func NewListVolumeAttachment(ctx *middleware.Context, handler ListVolumeAttachmentHandler) *ListVolumeAttachment {
	return &ListVolumeAttachment{Context: ctx, Handler: handler}
}

/*ListVolumeAttachment swagger:route GET /v1/clusters/{clusterID}/pools/{poolID}/volumes/{volumeID}/attachments listVolumeAttachment

ListVolumeAttachment list volume attachment API

*/
type ListVolumeAttachment struct {
	Context *middleware.Context
	Handler ListVolumeAttachmentHandler
}

func (o *ListVolumeAttachment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewListVolumeAttachmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
