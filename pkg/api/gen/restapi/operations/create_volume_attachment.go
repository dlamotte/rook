package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateVolumeAttachmentHandlerFunc turns a function with the right signature into a create volume attachment handler
type CreateVolumeAttachmentHandlerFunc func(CreateVolumeAttachmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateVolumeAttachmentHandlerFunc) Handle(params CreateVolumeAttachmentParams) middleware.Responder {
	return fn(params)
}

// CreateVolumeAttachmentHandler interface for that can handle valid create volume attachment params
type CreateVolumeAttachmentHandler interface {
	Handle(CreateVolumeAttachmentParams) middleware.Responder
}

// NewCreateVolumeAttachment creates a new http.Handler for the create volume attachment operation
func NewCreateVolumeAttachment(ctx *middleware.Context, handler CreateVolumeAttachmentHandler) *CreateVolumeAttachment {
	return &CreateVolumeAttachment{Context: ctx, Handler: handler}
}

/*CreateVolumeAttachment swagger:route POST /v1/clusters/{clusterID}/pools/{poolID}/volumes/{volumeID}/attachments createVolumeAttachment

CreateVolumeAttachment create volume attachment API

*/
type CreateVolumeAttachment struct {
	Context *middleware.Context
	Handler CreateVolumeAttachmentHandler
}

func (o *CreateVolumeAttachment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateVolumeAttachmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
