package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/rook/rook/pkg/api/gen/models"
)

/*DeleteVolumeAttachmentNoContent Deleted

swagger:response deleteVolumeAttachmentNoContent
*/
type DeleteVolumeAttachmentNoContent struct {
}

// NewDeleteVolumeAttachmentNoContent creates DeleteVolumeAttachmentNoContent with default headers values
func NewDeleteVolumeAttachmentNoContent() *DeleteVolumeAttachmentNoContent {
	return &DeleteVolumeAttachmentNoContent{}
}

// WriteResponse to the client
func (o *DeleteVolumeAttachmentNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*DeleteVolumeAttachmentDefault error

swagger:response deleteVolumeAttachmentDefault
*/
type DeleteVolumeAttachmentDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteVolumeAttachmentDefault creates DeleteVolumeAttachmentDefault with default headers values
func NewDeleteVolumeAttachmentDefault(code int) *DeleteVolumeAttachmentDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteVolumeAttachmentDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete volume attachment default response
func (o *DeleteVolumeAttachmentDefault) WithStatusCode(code int) *DeleteVolumeAttachmentDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete volume attachment default response
func (o *DeleteVolumeAttachmentDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete volume attachment default response
func (o *DeleteVolumeAttachmentDefault) WithPayload(payload *models.Error) *DeleteVolumeAttachmentDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete volume attachment default response
func (o *DeleteVolumeAttachmentDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVolumeAttachmentDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
